<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <PackageId>mu88.Shared</PackageId>
    <Authors>mu88</Authors>
    <Description>
      This is a little helper NuGet package to share certain the following aspects:
      - Enable .NET metrics and expose them via OpenTelemetry
      - Provide a custom health check tool for distroless scenarios
    </Description>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageLicenseFile>LICENSE.md</PackageLicenseFile>
    <PackageReleaseNotes>https://github.com/mu88/mu88.Shared/blob/main/CHANGELOG.md</PackageReleaseNotes>
    <PackageIcon>icon.jpg</PackageIcon>
    <PackageTags>opentelemetry containers docker Microsoft.NET.Build.Containers</PackageTags>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <NoWarn>$(NoWarn);NU5104</NoWarn>
  </PropertyGroup>
  <PropertyGroup>
    <!--    See: https://github.com/dotnet/sourcelink/issues/1203-->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
  </PropertyGroup>
  <PropertyGroup Condition="'$(GITHUB_ACTIONS)' == 'true'">
    <!--    See: https://github.com/clairernovotny/DeterministicBuilds?tab=readme-ov-file#deterministic-builds-->
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="IDisposableAnalyzers">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Meziantou.Analyzer">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="StyleCop.Analyzers">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <None Include="../../README.md" Pack="true" PackagePath="\"/>
    <None Include="../../LICENSE.md" Pack="true" PackagePath="\"/>
    <None Include="../../CHANGELOG.md" Pack="true" PackagePath="\"/>
    <None Include="../../icon.jpg" Pack="true" PackagePath="\"/>
    <None Include="mu88.Shared.props" Pack="true" PackagePath="\build"/>
    <None Include="mu88.Shared.props" Pack="true" PackagePath="\buildMultiTargeting"/>
    <None Include="mu88.Shared.props" Pack="true" PackagePath="\buildTransitive"/>
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Hosting.Abstractions"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore"/>
    <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol"/>
    <PackageReference Include="OpenTelemetry.Extensions.Hosting"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.EntityFrameworkCore"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.Process"/>
    <PackageReference Include="OpenTelemetry.Instrumentation.Runtime"/>
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="Tests"/>
  </ItemGroup>

  <!--  See: https://yer.ac/blog/2019/09/05/dotnet-pack-project-reference-and-nuget-dependency/ -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(OutputPath)/mu88.HealthCheck.runtimeconfig.json" Pack="True" PackageCopyToOutput="True" PackagePath="content;contentFiles\any\$(TargetFramework);"/>
    <ProjectReference Include="..\mu88.HealthCheck\mu88.HealthCheck.csproj" PrivateAssets="all">
      <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
      <IncludeAssets>mu88.HealthChecker.dll</IncludeAssets>
    </ProjectReference>
  </ItemGroup>

  <Target DependsOnTargets="ResolveReferences" Name="CopyProjectReferencesToPackage">
    <ItemGroup>
      <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))"/>
    </ItemGroup>
  </Target>

  <!-- To support proper Source Link debugging, we need to include the PDB files of all assemblies in the symbol package. -->
  <!-- Since the NuGet package contains both mu88.Shared.dll and mu88.HealthCheck.dll, mu88.HealthCheck.pdb has to be added to the symbol package, too. -->
  <!-- Unfortunately, I haven't found (yet) a better way of embedding the additional debug symbol file than manually manipulating the the package with custom MSBuild logic. -->
  <Target Name="AddHealthCheckSymbolsToSymbolPackage" AfterTargets="Pack">
    <PropertyGroup>
      <TemporarySymbolPackageModificationDirectory>$(PackageOutputPath)temp</TemporarySymbolPackageModificationDirectory>
    </PropertyGroup>

    <ItemGroup>
      <AdditionalDebugSymbols Include="$(OutputPath)/mu88.HealthCheck.pdb"/>
    </ItemGroup>

    <Message Text="Unzipping symbol package to '$(TemporarySymbolPackageModificationDirectory)'..." Importance="high" />
    <Unzip
      SourceFiles="$(PackageOutputPath)/$(PackageId).$(Version).snupkg"
      DestinationFolder="$(TemporarySymbolPackageModificationDirectory)"
      OverwriteReadOnlyFiles="true"
    />

    <Message Text="Deleting existing symbol package '$(PackageOutputPath)$(PackageId).$(Version).snupkg'..." Importance="high" />
    <Delete Files="$(PackageOutputPath)$(PackageId).$(Version).snupkg" />

    <Message Text="Adding additional debug symbols to '$(TemporarySymbolPackageModificationDirectory)/lib/$(TargetFramework)'..." Importance="high" />
    <Copy
      SourceFiles="@(AdditionalDebugSymbols)"
      DestinationFolder="$(TemporarySymbolPackageModificationDirectory)/lib/$(TargetFramework)"
    />

    <Message Text="Repacking symbol package from '$(TemporarySymbolPackageModificationDirectory)' to '$(PackageOutputPath)$(PackageId).$(Version).snupkg'..." Importance="high" />
    <ZipDirectory
      SourceDirectory="$(TemporarySymbolPackageModificationDirectory)"
      DestinationFile="$(PackageOutputPath)$(PackageId).$(Version).snupkg"
      Overwrite="true" />

    <Message Text="Cleaning up temporary directory '$(TemporarySymbolPackageModificationDirectory)'..." Importance="high" />
    <RemoveDir Directories="$(TemporarySymbolPackageModificationDirectory)" />
  </Target>
</Project>
